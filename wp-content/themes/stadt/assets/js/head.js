/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./source/assets/js/head.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/andlog/andlog.js":
/*!***************************************!*\
  !*** ./node_modules/andlog/andlog.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// follow @HenrikJoreteg and @andyet if you like this ;)\n(function () {\n    function getLocalStorageSafely() {\n        var localStorage;\n        try {\n            localStorage = window.localStorage;\n        } catch (e) {\n            // failed: access to localStorage is denied\n        }\n        return localStorage;\n    }\n\n    var inNode = typeof window === 'undefined',\n        ls = !inNode && getLocalStorageSafely(),\n        out = {};\n\n    if (inNode) {\n        module.exports = console;\n        return;\n    }\n\n    var andlogKey = ls.andlogKey || 'debug'\n    if (ls && ls[andlogKey] && window.console) {\n        out = window.console;\n    } else {\n        var methods = \"assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn\".split(\",\"),\n            l = methods.length,\n            fn = function () {};\n\n        while (l--) {\n            out[methods[l]] = fn;\n        }\n    }\n    if (true) {\n        module.exports = out;\n    } else {}\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW5kbG9nL2FuZGxvZy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbmRsb2cvYW5kbG9nLmpzPzk4ZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZm9sbG93IEBIZW5yaWtKb3JldGVnIGFuZCBAYW5keWV0IGlmIHlvdSBsaWtlIHRoaXMgOylcbihmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlU2FmZWx5KCkge1xuICAgICAgICB2YXIgbG9jYWxTdG9yYWdlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gZmFpbGVkOiBhY2Nlc3MgdG8gbG9jYWxTdG9yYWdlIGlzIGRlbmllZFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XG4gICAgfVxuXG4gICAgdmFyIGluTm9kZSA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnLFxuICAgICAgICBscyA9ICFpbk5vZGUgJiYgZ2V0TG9jYWxTdG9yYWdlU2FmZWx5KCksXG4gICAgICAgIG91dCA9IHt9O1xuXG4gICAgaWYgKGluTm9kZSkge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGNvbnNvbGU7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYW5kbG9nS2V5ID0gbHMuYW5kbG9nS2V5IHx8ICdkZWJ1ZydcbiAgICBpZiAobHMgJiYgbHNbYW5kbG9nS2V5XSAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICBvdXQgPSB3aW5kb3cuY29uc29sZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWV0aG9kcyA9IFwiYXNzZXJ0LGNvdW50LGRlYnVnLGRpcixkaXJ4bWwsZXJyb3IsZXhjZXB0aW9uLGdyb3VwLGdyb3VwQ29sbGFwc2VkLGdyb3VwRW5kLGluZm8sbG9nLG1hcmtUaW1lbGluZSxwcm9maWxlLHByb2ZpbGVFbmQsdGltZSx0aW1lRW5kLHRyYWNlLHdhcm5cIi5zcGxpdChcIixcIiksXG4gICAgICAgICAgICBsID0gbWV0aG9kcy5sZW5ndGgsXG4gICAgICAgICAgICBmbiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgIHdoaWxlIChsLS0pIHtcbiAgICAgICAgICAgIG91dFttZXRob2RzW2xdXSA9IGZuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBvdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmNvbnNvbGUgPSBvdXQ7XG4gICAgfVxufSkoKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/andlog/andlog.js\n");

/***/ }),

/***/ "./node_modules/bows/bows.js":
/*!***********************************!*\
  !*** ./node_modules/bows/bows.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function() {\n  function checkColorSupport() {\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return false;\n    }\n    var chrome = !!window.chrome,\n        firefox = /firefox/i.test(navigator.userAgent),\n        firefoxVersion;\n\n    if (firefox) {\n        var match = navigator.userAgent.match(/Firefox\\/(\\d+\\.\\d+)/);\n        if (match && match[1] && Number(match[1])) {\n            firefoxVersion = Number(match[1]);\n        }\n    }\n    return chrome || firefoxVersion >= 31.0;\n  }\n\n  var yieldColor = function() {\n    var goldenRatio = 0.618033988749895;\n    hue += goldenRatio;\n    hue = hue % 1;\n    return hue * 360;\n  };\n\n  var inNode = typeof window === 'undefined',\n      ls = !inNode && window.localStorage,\n      debugKey = ls.andlogKey || 'debug',\n      debug = ls[debugKey],\n      logger = __webpack_require__(/*! andlog */ \"./node_modules/andlog/andlog.js\"),\n      bind = Function.prototype.bind,\n      hue = 0,\n      padLength = 15,\n      noop = function() {},\n      colorsSupported = ls.debugColors || checkColorSupport(),\n      bows = null,\n      debugRegex = null,\n      invertRegex = false,\n      moduleColorsMap = {};\n\n  if (debug && debug[0] === '!' && debug[1] === '/') {\n    invertRegex = true;\n    debug = debug.slice(1);\n  }\n  debugRegex = debug && debug[0]==='/' && new RegExp(debug.substring(1,debug.length-1));\n\n  var logLevels = ['log', 'debug', 'warn', 'error', 'info'];\n\n  //Noop should noop\n  for (var i = 0, ii = logLevels.length; i < ii; i++) {\n      noop[ logLevels[i] ] = noop;\n  }\n\n  bows = function(str) {\n    var msg, colorString, logfn;\n    msg = (str.slice(0, padLength));\n    msg += Array(padLength + 3 - msg.length).join(' ') + '|';\n\n    if (debugRegex) {\n        var matches = str.match(debugRegex);\n        if (\n            (!invertRegex && !matches) ||\n            (invertRegex && matches)\n        ) return noop;\n    }\n\n    if (!bind) return noop;\n\n    var logArgs = [logger];\n    if (colorsSupported) {\n      if(!moduleColorsMap[str]){\n        moduleColorsMap[str]= yieldColor();\n      }\n      var color = moduleColorsMap[str];\n      msg = \"%c\" + msg;\n      colorString = \"color: hsl(\" + (color) + \",99%,40%); font-weight: bold\";\n\n      logArgs.push(msg, colorString);\n    }else{\n      logArgs.push(msg);\n    }\n\n    if(arguments.length>1){\n        var args = Array.prototype.slice.call(arguments, 1);\n        logArgs = logArgs.concat(args);\n    }\n\n    logfn = bind.apply(logger.log, logArgs);\n\n    logLevels.forEach(function (f) {\n      logfn[f] = bind.apply(logger[f] || logfn, logArgs);\n    });\n    return logfn;\n  };\n\n  bows.config = function(config) {\n    if (config.padLength) {\n      padLength = config.padLength;\n    }\n  };\n\n  if (true) {\n    module.exports = bows;\n  } else {}\n}).call();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYm93cy9ib3dzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvd3MvYm93cy5qcz8yYzk2Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gY2hlY2tDb2xvclN1cHBvcnQoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBjaHJvbWUgPSAhIXdpbmRvdy5jaHJvbWUsXG4gICAgICAgIGZpcmVmb3ggPSAvZmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gICAgICAgIGZpcmVmb3hWZXJzaW9uO1xuXG4gICAgaWYgKGZpcmVmb3gpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFxcLyhcXGQrXFwuXFxkKykvKTtcbiAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdICYmIE51bWJlcihtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgIGZpcmVmb3hWZXJzaW9uID0gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hyb21lIHx8IGZpcmVmb3hWZXJzaW9uID49IDMxLjA7XG4gIH1cblxuICB2YXIgeWllbGRDb2xvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBnb2xkZW5SYXRpbyA9IDAuNjE4MDMzOTg4NzQ5ODk1O1xuICAgIGh1ZSArPSBnb2xkZW5SYXRpbztcbiAgICBodWUgPSBodWUgJSAxO1xuICAgIHJldHVybiBodWUgKiAzNjA7XG4gIH07XG5cbiAgdmFyIGluTm9kZSA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnLFxuICAgICAgbHMgPSAhaW5Ob2RlICYmIHdpbmRvdy5sb2NhbFN0b3JhZ2UsXG4gICAgICBkZWJ1Z0tleSA9IGxzLmFuZGxvZ0tleSB8fCAnZGVidWcnLFxuICAgICAgZGVidWcgPSBsc1tkZWJ1Z0tleV0sXG4gICAgICBsb2dnZXIgPSByZXF1aXJlKCdhbmRsb2cnKSxcbiAgICAgIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCxcbiAgICAgIGh1ZSA9IDAsXG4gICAgICBwYWRMZW5ndGggPSAxNSxcbiAgICAgIG5vb3AgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgY29sb3JzU3VwcG9ydGVkID0gbHMuZGVidWdDb2xvcnMgfHwgY2hlY2tDb2xvclN1cHBvcnQoKSxcbiAgICAgIGJvd3MgPSBudWxsLFxuICAgICAgZGVidWdSZWdleCA9IG51bGwsXG4gICAgICBpbnZlcnRSZWdleCA9IGZhbHNlLFxuICAgICAgbW9kdWxlQ29sb3JzTWFwID0ge307XG5cbiAgaWYgKGRlYnVnICYmIGRlYnVnWzBdID09PSAnIScgJiYgZGVidWdbMV0gPT09ICcvJykge1xuICAgIGludmVydFJlZ2V4ID0gdHJ1ZTtcbiAgICBkZWJ1ZyA9IGRlYnVnLnNsaWNlKDEpO1xuICB9XG4gIGRlYnVnUmVnZXggPSBkZWJ1ZyAmJiBkZWJ1Z1swXT09PScvJyAmJiBuZXcgUmVnRXhwKGRlYnVnLnN1YnN0cmluZygxLGRlYnVnLmxlbmd0aC0xKSk7XG5cbiAgdmFyIGxvZ0xldmVscyA9IFsnbG9nJywgJ2RlYnVnJywgJ3dhcm4nLCAnZXJyb3InLCAnaW5mbyddO1xuXG4gIC8vTm9vcCBzaG91bGQgbm9vcFxuICBmb3IgKHZhciBpID0gMCwgaWkgPSBsb2dMZXZlbHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgbm9vcFsgbG9nTGV2ZWxzW2ldIF0gPSBub29wO1xuICB9XG5cbiAgYm93cyA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHZhciBtc2csIGNvbG9yU3RyaW5nLCBsb2dmbjtcbiAgICBtc2cgPSAoc3RyLnNsaWNlKDAsIHBhZExlbmd0aCkpO1xuICAgIG1zZyArPSBBcnJheShwYWRMZW5ndGggKyAzIC0gbXNnLmxlbmd0aCkuam9pbignICcpICsgJ3wnO1xuXG4gICAgaWYgKGRlYnVnUmVnZXgpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBzdHIubWF0Y2goZGVidWdSZWdleCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICghaW52ZXJ0UmVnZXggJiYgIW1hdGNoZXMpIHx8XG4gICAgICAgICAgICAoaW52ZXJ0UmVnZXggJiYgbWF0Y2hlcylcbiAgICAgICAgKSByZXR1cm4gbm9vcDtcbiAgICB9XG5cbiAgICBpZiAoIWJpbmQpIHJldHVybiBub29wO1xuXG4gICAgdmFyIGxvZ0FyZ3MgPSBbbG9nZ2VyXTtcbiAgICBpZiAoY29sb3JzU3VwcG9ydGVkKSB7XG4gICAgICBpZighbW9kdWxlQ29sb3JzTWFwW3N0cl0pe1xuICAgICAgICBtb2R1bGVDb2xvcnNNYXBbc3RyXT0geWllbGRDb2xvcigpO1xuICAgICAgfVxuICAgICAgdmFyIGNvbG9yID0gbW9kdWxlQ29sb3JzTWFwW3N0cl07XG4gICAgICBtc2cgPSBcIiVjXCIgKyBtc2c7XG4gICAgICBjb2xvclN0cmluZyA9IFwiY29sb3I6IGhzbChcIiArIChjb2xvcikgKyBcIiw5OSUsNDAlKTsgZm9udC13ZWlnaHQ6IGJvbGRcIjtcblxuICAgICAgbG9nQXJncy5wdXNoKG1zZywgY29sb3JTdHJpbmcpO1xuICAgIH1lbHNle1xuICAgICAgbG9nQXJncy5wdXNoKG1zZyk7XG4gICAgfVxuXG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aD4xKXtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBsb2dBcmdzID0gbG9nQXJncy5jb25jYXQoYXJncyk7XG4gICAgfVxuXG4gICAgbG9nZm4gPSBiaW5kLmFwcGx5KGxvZ2dlci5sb2csIGxvZ0FyZ3MpO1xuXG4gICAgbG9nTGV2ZWxzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgIGxvZ2ZuW2ZdID0gYmluZC5hcHBseShsb2dnZXJbZl0gfHwgbG9nZm4sIGxvZ0FyZ3MpO1xuICAgIH0pO1xuICAgIHJldHVybiBsb2dmbjtcbiAgfTtcblxuICBib3dzLmNvbmZpZyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGlmIChjb25maWcucGFkTGVuZ3RoKSB7XG4gICAgICBwYWRMZW5ndGggPSBjb25maWcucGFkTGVuZ3RoO1xuICAgIH1cbiAgfTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGJvd3M7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmJvd3MgPSBib3dzO1xuICB9XG59KS5jYWxsKCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FFQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/bows/bows.js\n");

/***/ }),

/***/ "./source/assets/.tmp/modernizr.js":
/*!*****************************************!*\
  !*** ./source/assets/.tmp/modernizr.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * modernizr v3.6.0\n * Build https://modernizr.com/download?-contains-csstransforms-flash-flexbox-flexboxlegacy-flexboxtweener-fullscreen-hidden-progressbar_meter-search-svg-target-template-time-touchevents-video-setclasses-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function (window, document, undefined) {\n  var tests = [];\n\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.6.0',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function on(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function () {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function addTest(name, fn, options) {\n      tests.push({ name: name, fn: fn, options: options });\n    },\n\n    addAsyncTest: function addAsyncTest(fn) {\n      tests.push({ name: null, fn: fn });\n    }\n  };\n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function Modernizr() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  var classes = [];\n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === type;\n  }\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n  }\n\n  ;\n\n  /**\n   * If the browsers follow the spec, then they would expose vendor-specific styles as:\n   *   elem.style.WebkitBorderRadius\n   * instead of something like the following (which is technically incorrect):\n   *   elem.style.webkitBorderRadius\n    * WebKit ghosts their properties in lowercase but Opera & Moz do not.\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\n    * More here: github.com/Modernizr/Modernizr/issues/issue/21\n   *\n   * @access private\n   * @returns {string} The string representing the vendor-specific style properties\n   */\n\n  var omPrefixes = 'Moz O ms Webkit';\n\n  var cssomPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : [];\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean}\n   */\n\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function () {\n    delete modElem.elem;\n  });\n\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function () {\n    delete mStyle.style;\n  });\n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n  }\n\n  ;\n\n  /**\n   * domToCSS takes a camelCase string and converts it to kebab-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The kebab-case version of the supplied name\n   */\n\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function (str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  ;\n\n  /**\n   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n   * called inside of a hidden iframe\n   *\n   * @access private\n   * @function computedStyle\n   * @param {HTMLElement|SVGElement} - The element we want to find the computed styles of\n   * @param {string|null} [pseudoSelector]- An optional pseudo element selector (e.g. :before), of null if none\n   * @returns {CSSStyleDeclaration}\n   */\n\n  function computedStyle(elem, pseudo, prop) {\n    var result;\n\n    if ('getComputedStyle' in window) {\n      result = getComputedStyle.call(window, elem, pseudo);\n      var console = window.console;\n\n      if (result !== null) {\n        if (prop) {\n          result = result.getPropertyValue(prop);\n        }\n      } else {\n        if (console) {\n          var method = console.error ? 'error' : 'log';\n          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n        }\n      }\n    } else {\n      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n    }\n\n    return result;\n  }\n\n  ;\n\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n        // Build a condition string for every prefixed variant\n        var conditionText = [];\n        while (i--) {\n          conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n        }\n        conditionText = conditionText.join(' or ');\n        return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function (node) {\n          return computedStyle(node, null, 'position') == 'absolute';\n        });\n      }\n    return undefined;\n  }\n  ;\n\n  /**\n   * cssToDOM takes a kebab-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of kebab-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function (str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    // for strict XHTML browsers the hardly used samp element is used\n    var elems = ['modernizr', 'tspan', 'samp'];\n    while (!mStyle.style && elems.length) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  /**\n   * List of JavaScript DOM values used for tests\n   *\n   * @memberof Modernizr\n   * @name Modernizr._domPrefixes\n   * @optionName Modernizr._domPrefixes\n   * @optionProp domPrefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n   * than kebab-case properties, all properties are their Capitalized variant\n   *\n   * ```js\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n   * ```\n   */\n\n  var domPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : [];\n  ModernizrProto._domPrefixes = domPrefixes;\n\n  /**\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n   *\n   * @access private\n   * @function fnBind\n   * @param {function} fn - a function you want to change `this` reference to\n   * @param {object} that - the `this` you want to call the function with\n   * @returns {function} The wrapped version of the supplied function\n   */\n\n  function fnBind(fn, that) {\n    return function () {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   *\n   * @access private\n   * @function testDOMProps\n   * @param {array.<string>} props - An array of properties to test for\n   * @param {object} obj - An object or Element you want to use to test the parameters again\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n   * @returns {false|*} returns false if the prop is unsupported, otherwise the value that is supported\n   */\n  function testDOMProps(props, obj, elem) {\n    var item;\n\n    for (var i in props) {\n      if (props[i] in obj) {\n\n        // return the property name as a string\n        if (elem === false) {\n          return props[i];\n        }\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   * We specify literally ALL possible (known and/or likely) properties on\n   * the element including the non-vendor prefixed one, for forward-\n   * compatibility.\n   *\n   * @access private\n   * @function testPropsAll\n   * @param {string} prop - A string of the property to test for\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n   * @param {string} [value] - A string of a css value\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n   * @returns {false|string} returns the string version of the property, or false if it is unsupported\n   */\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n        props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + domPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  // or any of its vendor-prefixed variants, is recognized\n  //\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  /**\n   * testAllProps determines whether a given CSS property is supported in the browser\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testAllProps\n   * @optionName Modernizr.testAllProps()\n   * @optionProp testAllProps\n   * @access public\n   * @function testAllProps\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n   * @param {string} [value] - String of the value to test\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n   * @example\n   *\n   * testAllProps determines whether a given CSS property, in some prefixed form,\n   * is supported by the browser.\n   *\n   * ```js\n   * testAllProps('boxSizing')  // true\n   * ```\n   *\n   * It can optionally be given a CSS value in string form to test if a property\n   * value is valid\n   *\n   * ```js\n   * testAllProps('display', 'block') // true\n   * testAllProps('display', 'penguin') // false\n   * ```\n   *\n   * A boolean can be passed as a third parameter to skip the value check when\n   * native detection (@supports) isn't available.\n   *\n   * ```js\n   * testAllProps('shapeOutside', 'content-box', true);\n   * ```\n   */\n\n  function testAllProps(prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n\n  /*\n  {\n    \"name\": \"Flexbox\",\n    \"property\": \"flexbox\",\n    \"caniuse\": \"flexbox\",\n    \"tags\": [\"css\"],\n    \"notes\": [{\n      \"name\": \"The _new_ flexbox\",\n      \"href\": \"http://dev.w3.org/csswg/css3-flexbox\"\n    }],\n    \"warnings\": [\n      \"A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect.\"\n    ]\n  }\n  */\n  /* DOC\n  Detects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\n  */\n\n  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));\n\n  /*\n  {\n    \"name\": \"Flexbox (legacy)\",\n    \"property\": \"flexboxlegacy\",\n    \"tags\": [\"css\"],\n    \"polyfills\": [\"flexie\"],\n    \"notes\": [{\n      \"name\": \"The _old_ flexbox\",\n      \"href\": \"https://www.w3.org/TR/2009/WD-css3-flexbox-20090723/\"\n    }]\n  }\n  */\n\n  Modernizr.addTest('flexboxlegacy', testAllProps('boxDirection', 'reverse', true));\n\n  /*\n  {\n    \"name\": \"Flexbox (tweener)\",\n    \"property\": \"flexboxtweener\",\n    \"tags\": [\"css\"],\n    \"polyfills\": [\"flexie\"],\n    \"notes\": [{\n      \"name\": \"The _inbetween_ flexbox\",\n      \"href\": \"https://www.w3.org/TR/2011/WD-css3-flexbox-20111129/\"\n    }],\n    \"warnings\": [\"This represents an old syntax, not the latest standard syntax.\"]\n  }\n  */\n\n  Modernizr.addTest('flexboxtweener', testAllProps('flexAlign', 'end', true));\n\n  /*\n  {\n    \"name\": \"SVG\",\n    \"property\": \"svg\",\n    \"caniuse\": \"svg\",\n    \"tags\": [\"svg\"],\n    \"authors\": [\"Erik Dahlstrom\"],\n    \"polyfills\": [\n      \"svgweb\",\n      \"raphael\",\n      \"amplesdk\",\n      \"canvg\",\n      \"svg-boilerplate\",\n      \"sie\",\n      \"dojogfx\",\n      \"fabricjs\"\n    ]\n  }\n  */\n  /* DOC\n  Detects support for SVG in `<embed>` or `<object>` elements.\n  */\n\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\n\n  /*\n  {\n    \"name\": \"Template Tag\",\n    \"property\": \"template\",\n    \"tags\": [\"elem\"],\n    \"notes\": [{\n      \"name\": \"HTML5Rocks Article\",\n      \"href\": \"http://www.html5rocks.com/en/tutorials/webcomponents/template/\"\n    },{\n      \"name\": \"W3 Spec\",\n      \"href\": \"https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html\"\n    }]\n  }\n  */\n\n  Modernizr.addTest('template', 'content' in createElement('template'));\n\n  /*\n  {\n    \"name\": \"[hidden] Attribute\",\n    \"property\": \"hidden\",\n    \"tags\": [\"dom\"],\n    \"notes\": [{\n      \"name\": \"WHATWG: The hidden attribute\",\n      \"href\": \"https://developers.whatwg.org/editing.html#the-hidden-attribute\"\n    }, {\n      \"name\": \"original implementation of detect code\",\n      \"href\": \"https://github.com/aFarkas/html5shiv/blob/bf4fcc4/src/html5shiv.js#L38\"\n    }],\n    \"polyfills\": [\"html5shiv\"],\n    \"authors\": [\"Ron Waldon (@jokeyrhyme)\"]\n  }\n  */\n  /* DOC\n  Does the browser support the HTML5 [hidden] attribute?\n  */\n\n  Modernizr.addTest('hidden', 'hidden' in createElement('a'));\n\n  /**\n   * List of property values to set for css tests. See ticket #21\n   * http://git.io/vUGl4\n   *\n   * @memberof Modernizr\n   * @name Modernizr._prefixes\n   * @optionName Modernizr._prefixes\n   * @optionProp prefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._prefixes is the internal list of prefixes that we test against\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n   * an array of kebab-case vendor prefixes you can use within your code.\n   *\n   * Some common use cases include\n   *\n   * Generating all possible prefixed version of a CSS property\n   * ```js\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n   *\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n   * ```\n   *\n   * Generating all possible prefixed version of a CSS value\n   * ```js\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n   *\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n   * ```\n   */\n\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\n  // values in feature detects to continue to work\n  var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['', ''];\n\n  // expose these for the plugin API. Look in the source for how to join() them against your input\n  ModernizrProto._prefixes = prefixes;\n\n  /**\n   * testStyles injects an element with style element and some CSS rules\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testStyles\n   * @optionName Modernizr.testStyles()\n   * @optionProp testStyles\n   * @access public\n   * @function testStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   * @example\n   *\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n   * along with (possibly multiple) DOM elements. This lets you check for features\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n   *   // elem is the first DOM node in the page (by default #modernizr)\n   *   // rule is the first argument you supplied - the CSS rule in string form\n   *\n   *   addTest('widthworks', elem.style.width === '9px')\n   * });\n   * ```\n   *\n   * If your test requires multiple nodes, you can include a third argument\n   * indicating how many additional div elements to include on the page. The\n   * additional nodes are injected as children of the `elem` that is returned as\n   * the first argument to the callback.\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n   *   document.getElementById('modernizr').style.width === '1px'; // true\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\n   * }, 1);\n   * ```\n   *\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n   * the second additional is `#modernizr3`, etc.).\n   * If you want to have more meaningful IDs for your function, you can provide\n   * them as the fourth argument, as an array of strings\n   *\n   * ```js\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n   *   elem.firstChild === document.getElementById('foo'); // true\n   *   elem.lastChild === document.getElementById('bar'); // true\n   * }, 2, ['foo', 'bar']);\n   * ```\n   *\n   */\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n\n  /*\n  {\n    \"name\": \"Touch Events\",\n    \"property\": \"touchevents\",\n    \"caniuse\" : \"touch\",\n    \"tags\": [\"media\", \"attribute\"],\n    \"notes\": [{\n      \"name\": \"Touch Events spec\",\n      \"href\": \"https://www.w3.org/TR/2013/WD-touch-events-20130124/\"\n    }],\n    \"warnings\": [\n      \"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\"\n    ],\n    \"knownBugs\": [\n      \"False-positive on some configurations of Nokia N900\",\n      \"False-positive on some BlackBerry 6.0 builds â€“ https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\"\n    ]\n  }\n  */\n  /* DOC\n  Indicates if the browser supports the W3C Touch Events API.\n  \n  This *does not* necessarily reflect a touchscreen device:\n  \n  * Older touchscreen devices only emulate mouse events\n  * Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\n  * Some browsers & OS setups may enable touch APIs when no touchscreen is connected\n  * Future browsers may implement other event models for touch interactions\n  \n  See this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\n  \n  It's recommended to bind both mouse and touch/pointer events simultaneously â€“ see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\n  \n  This test will also return `true` for Firefox 4 Multitouch support.\n  */\n\n  // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\n  Modernizr.addTest('touchevents', function () {\n    var bool;\n    if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\n      bool = true;\n    } else {\n      // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n      // https://git.io/vznFH\n      var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\n      testStyles(query, function (node) {\n        bool = node.offsetTop === 9;\n      });\n    }\n    return bool;\n  });\n\n  /*\n  {\n    \"name\": \"time Element\",\n    \"property\": \"time\",\n    \"tags\": [\"elem\"],\n    \"builderAliases\": [\"elem_time\"],\n    \"notes\": [{\n      \"name\": \"WhatWG Spec\",\n      \"href\": \"https://html.spec.whatwg.org/multipage/semantics.html#the-time-element\"\n    }]\n  }\n  */\n\n  Modernizr.addTest('time', 'valueAsDate' in createElement('time'));\n\n  /**\n   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support\n   *\n   * @author kangax\n   * @access private\n   * @function hasOwnProp\n   * @param {object} object - The object to check for a property\n   * @param {string} property - The property to check for\n   * @returns {boolean}\n   */\n\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support\n  var hasOwnProp;\n\n  (function () {\n    var _hasOwnProperty = {}.hasOwnProperty;\n    /* istanbul ignore else */\n    /* we have no way of testing IE 5.5 or safari 2,\n     * so just assume the else gets hit */\n    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\n      hasOwnProp = function hasOwnProp(object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    } else {\n      hasOwnProp = function hasOwnProp(object, property) {\n        /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return property in object && is(object.constructor.prototype[property], 'undefined');\n      };\n    }\n  })();\n\n  // _l tracks listeners for async tests, as well as tests that execute after the initial run\n  ModernizrProto._l = {};\n\n  /**\n   * Modernizr.on is a way to listen for the completion of async tests. Being\n   * asynchronous, they may not finish before your scripts run. As a result you\n   * will get a possibly false negative `undefined` value.\n   *\n   * @memberof Modernizr\n   * @name Modernizr.on\n   * @access public\n   * @function on\n   * @param {string} feature - String name of the feature detect\n   * @param {function} cb - Callback function returning a Boolean - true if feature is supported, false if not\n   * @example\n   *\n   * ```js\n   * Modernizr.on('flash', function( result ) {\n   *   if (result) {\n   *    // the browser has flash\n   *   } else {\n   *     // the browser does not have flash\n   *   }\n   * });\n   * ```\n   */\n\n  ModernizrProto.on = function (feature, cb) {\n    // Create the list of listeners if it doesn't exist\n    if (!this._l[feature]) {\n      this._l[feature] = [];\n    }\n\n    // Push this test on to the listener list\n    this._l[feature].push(cb);\n\n    // If it's already been resolved, trigger it on next tick\n    if (Modernizr.hasOwnProperty(feature)) {\n      // Next Tick\n      setTimeout(function () {\n        Modernizr._trigger(feature, Modernizr[feature]);\n      }, 0);\n    }\n  };\n\n  /**\n   * _trigger is the private function used to signal test completion and run any\n   * callbacks registered through [Modernizr.on](#modernizr-on)\n   *\n   * @memberof Modernizr\n   * @name Modernizr._trigger\n   * @access private\n   * @function _trigger\n   * @param {string} feature - string name of the feature detect\n   * @param {function|boolean} [res] - A feature detection function, or the boolean =\n   * result of a feature detection function\n   */\n\n  ModernizrProto._trigger = function (feature, res) {\n    if (!this._l[feature]) {\n      return;\n    }\n\n    var cbs = this._l[feature];\n\n    // Force async\n    setTimeout(function () {\n      var i, cb;\n      for (i = 0; i < cbs.length; i++) {\n        cb = cbs[i];\n        cb(res);\n      }\n    }, 0);\n\n    // Don't trigger these again\n    delete this._l[feature];\n  };\n\n  /**\n   * addTest allows you to define your own feature detects that are not currently\n   * included in Modernizr (under the covers it's the exact same code Modernizr\n   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)). Just like the offical detects, the result\n   * will be added onto the Modernizr object, as well as an appropriate className set on\n   * the html element when configured to do so\n   *\n   * @memberof Modernizr\n   * @name Modernizr.addTest\n   * @optionName Modernizr.addTest()\n   * @optionProp addTest\n   * @access public\n   * @function addTest\n   * @param {string|object} feature - The string name of the feature detect, or an\n   * object of feature detect names and test\n   * @param {function|boolean} test - Function returning true if feature is supported,\n   * false if not. Otherwise a boolean representing the results of a feature detection\n   * @example\n   *\n   * The most common way of creating your own feature detects is by calling\n   * `Modernizr.addTest` with a string (preferably just lowercase, without any\n   * punctuation), and a function you want executed that will return a boolean result\n   *\n   * ```js\n   * Modernizr.addTest('itsTuesday', function() {\n   *  var d = new Date();\n   *  return d.getDay() === 2;\n   * });\n   * ```\n   *\n   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,\n   * and to `false` every other day of the week. One thing to notice is that the names of\n   * feature detect functions are always lowercased when added to the Modernizr object. That\n   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.\n   *\n   *\n   *  Since we only look at the returned value from any feature detection function,\n   *  you do not need to actually use a function. For simple detections, just passing\n   *  in a statement that will return a boolean value works just fine.\n   *\n   * ```js\n   * Modernizr.addTest('hasJquery', 'jQuery' in window);\n   * ```\n   *\n   * Just like before, when the above runs `Modernizr.hasjquery` will be true if\n   * jQuery has been included on the page. Not using a function saves a small amount\n   * of overhead for the browser, as well as making your code much more readable.\n   *\n   * Finally, you also have the ability to pass in an object of feature names and\n   * their tests. This is handy if you want to add multiple detections in one go.\n   * The keys should always be a string, and the value can be either a boolean or\n   * function that returns a boolean.\n   *\n   * ```js\n   * var detects = {\n   *  'hasjquery': 'jQuery' in window,\n   *  'itstuesday': function() {\n   *    var d = new Date();\n   *    return d.getDay() === 2;\n   *  }\n   * }\n   *\n   * Modernizr.addTest(detects);\n   * ```\n   *\n   * There is really no difference between the first methods and this one, it is\n   * just a convenience to let you write more readable code.\n   */\n\n  function addTest(feature, test) {\n\n    if ((typeof feature === 'undefined' ? 'undefined' : _typeof(feature)) == 'object') {\n      for (var key in feature) {\n        if (hasOwnProp(feature, key)) {\n          addTest(key, feature[key]);\n        }\n      }\n    } else {\n\n      feature = feature.toLowerCase();\n      var featureNameSplit = feature.split('.');\n      var last = Modernizr[featureNameSplit[0]];\n\n      // Again, we don't check for parent test existence. Get that right, though.\n      if (featureNameSplit.length == 2) {\n        last = last[featureNameSplit[1]];\n      }\n\n      if (typeof last != 'undefined') {\n        // we're going to quit if you're trying to overwrite an existing test\n        // if we were to allow it, we'd do this:\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n        //   docElement.className = docElement.className.replace( re, '' );\n        // but, no rly, stuff 'em.\n        return Modernizr;\n      }\n\n      test = typeof test == 'function' ? test() : test;\n\n      // Set the value (this is the magic, right here).\n      if (featureNameSplit.length == 1) {\n        Modernizr[featureNameSplit[0]] = test;\n      } else {\n        // cast to a Boolean, if not one already\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n        }\n\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\n      }\n\n      // Set a single class (either `feature` or `no-feature`)\n      setClasses([(!!test && test != false ? '' : 'no-') + featureNameSplit.join('-')]);\n\n      // Trigger the event\n      Modernizr._trigger(feature, test);\n    }\n\n    return Modernizr; // allow chaining.\n  }\n\n  // After all the tests are run, add self to the Modernizr prototype\n  Modernizr._q.push(function () {\n    ModernizrProto.addTest = addTest;\n  });\n\n  /*!\n    {\n    \"name\": \"Flash\",\n    \"property\": \"flash\",\n    \"tags\": [\"flash\"],\n    \"polyfills\": [\"shumway\"]\n    }\n    */\n  /* DOC\n  Detects Flash support as well as Flash-blocking plugins\n  */\n\n  Modernizr.addAsyncTest(function () {\n\n    var attachBody = function attachBody(body) {\n      if (!docElement.contains(body)) {\n        docElement.appendChild(body);\n      }\n    };\n    var removeFakeBody = function removeFakeBody(body) {\n      // If weâ€™re rockinâ€™ an attached fake body, clean it up\n      if (body.fake && body.parentNode) {\n        body.parentNode.removeChild(body);\n      }\n    };\n    var runTest = function runTest(result, embed) {\n      var bool = !!result;\n      if (bool) {\n        bool = new Boolean(bool);\n        bool.blocked = result === 'blocked';\n      }\n      addTest('flash', function () {\n        return bool;\n      });\n\n      if (embed && body.contains(embed)) {\n\n        // in case embed has been wrapped, as with ClickToPlugin\n        while (embed.parentNode !== body) {\n          embed = embed.parentNode;\n        }\n\n        body.removeChild(embed);\n      }\n    };\n    var easy_detect;\n    var activex;\n    // we wrap activex in a try/catch because when Flash is disabled through\n    // ActiveX controls, it throws an error.\n    try {\n      // Pan is an API that exists for Flash objects.\n      activex = 'ActiveXObject' in window && 'Pan' in new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash');\n    } catch (e) {}\n\n    easy_detect = !('plugins' in navigator && 'Shockwave Flash' in navigator.plugins || activex);\n\n    if (easy_detect || isSVG) {\n      runTest(false);\n    } else {\n      // Flash seems to be installed, but it might be blocked. We have to\n      // actually create an element to see what happens to it.\n      var embed = createElement('embed');\n      var body = getBody();\n      var _blockedDetect;\n      var inline_style;\n\n      embed.type = 'application/x-shockwave-flash';\n\n      // Need to do this in the body (fake or otherwise) otherwise IE8 complains\n      body.appendChild(embed);\n\n      // Pan doesn't exist in the embed if its IE (its on the ActiveXObjeect)\n      // so this check is for all other browsers.\n      if (!('Pan' in embed) && !activex) {\n        attachBody(body);\n        runTest('blocked', embed);\n        removeFakeBody(body);\n        return;\n      }\n\n      _blockedDetect = function blockedDetect() {\n        // if we used a fake body originally, we need to restart this test, since\n        // we haven't been attached to the DOM, and therefore none of the blockers\n        // have had time to work.\n        attachBody(body);\n        if (!docElement.contains(body)) {\n          body = document.body || body;\n          embed = createElement('embed');\n          embed.type = 'application/x-shockwave-flash';\n          body.appendChild(embed);\n          return setTimeout(_blockedDetect, 1000);\n        }\n        if (!docElement.contains(embed)) {\n          runTest('blocked');\n        } else {\n          inline_style = embed.style.cssText;\n          if (inline_style !== '') {\n            // the style of the element has changed automatically. This is a\n            // really poor heuristic, but for lower end Flash blocks, it the\n            // only change they can make.\n            runTest('blocked', embed);\n          } else {\n            runTest(true, embed);\n          }\n        }\n        removeFakeBody(body);\n      };\n\n      // If we have got this far, there is still a chance a userland plugin\n      // is blocking us (either changing the styles, or automatically removing\n      // the element). Both of these require us to take a step back for a moment\n      // to allow for them to get time of the thread, hence a setTimeout.\n      //\n      setTimeout(_blockedDetect, 10);\n    }\n  });\n\n  /*\n  {\n    \"name\": \"progress Element\",\n    \"caniuse\": \"progress\",\n    \"property\": [\"progressbar\", \"meter\"],\n    \"tags\": [\"elem\"],\n    \"builderAliases\": [\"elem_progress_meter\"],\n    \"authors\": [\"Stefan Wallin\"]\n  }\n  */\n\n  // Tests for progressbar-support. All browsers that don't support progressbar returns undefined =)\n  Modernizr.addTest('progressbar', createElement('progress').max !== undefined);\n\n  // Tests for meter-support. All browsers that don't support meters returns undefined =)\n  Modernizr.addTest('meter', createElement('meter').max !== undefined);\n\n  /**\n   * Modernizr.hasEvent() detects support for a given event\n   *\n   * @memberof Modernizr\n   * @name Modernizr.hasEvent\n   * @optionName Modernizr.hasEvent()\n   * @optionProp hasEvent\n   * @access public\n   * @function hasEvent\n   * @param  {string|*} eventName - the name of an event to test for (e.g. \"resize\")\n   * @param  {Element|string} [element=HTMLDivElement] - is the element|document|window|tagName to test on\n   * @returns {boolean}\n   * @example\n   *  `Modernizr.hasEvent` lets you determine if the browser supports a supplied event.\n   *  By default, it does this detection on a div element\n   *\n   * ```js\n   *  hasEvent('blur') // true;\n   * ```\n   *\n   * However, you are able to give an object as a second argument to hasEvent to\n   * detect an event on something other than a div.\n   *\n   * ```js\n   *  hasEvent('devicelight', window) // true;\n   * ```\n   *\n   */\n\n  var hasEvent = function () {\n\n    // Detect whether event support can be detected via `in`. Test on a DOM element\n    // using the \"blur\" event b/c it should always exist. bit.ly/event-detection\n    var needsFallback = !('onblur' in document.documentElement);\n\n    function inner(eventName, element) {\n\n      var isSupported;\n      if (!eventName) {\n        return false;\n      }\n      if (!element || typeof element === 'string') {\n        element = createElement(element || 'div');\n      }\n\n      // Testing via the `in` operator is sufficient for modern browsers and IE.\n      // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and\n      // \"resize\", whereas `in` \"catches\" those.\n      eventName = 'on' + eventName;\n      isSupported = eventName in element;\n\n      // Fallback technique for old Firefox - bit.ly/event-detection\n      if (!isSupported && needsFallback) {\n        if (!element.setAttribute) {\n          // Switch to generic element if it lacks `setAttribute`.\n          // It could be the `document`, `window`, or something else.\n          element = createElement('div');\n        }\n\n        element.setAttribute(eventName, '');\n        isSupported = typeof element[eventName] === 'function';\n\n        if (element[eventName] !== undefined) {\n          // If property was created, \"remove it\" by setting value to `undefined`.\n          element[eventName] = undefined;\n        }\n        element.removeAttribute(eventName);\n      }\n\n      return isSupported;\n    }\n    return inner;\n  }();\n\n  ModernizrProto.hasEvent = hasEvent;\n\n  /*\n  {\n    \"name\": \"input[search] search event\",\n    \"property\": \"search\",\n    \"tags\": [\"input\",\"search\"],\n    \"authors\": [\"Calvin Webster\"],\n    \"notes\": [{\n      \"name\": \"Wufoo demo\",\n      \"href\": \"https://www.wufoo.com/html5/types/5-search.html?\"\n    }, {\n      \"name\": \"CSS Tricks\",\n      \"href\": \"https://css-tricks.com/webkit-html5-search-inputs/\"\n    }]\n  }\n  */\n  /* DOC\n  There is a custom `search` event implemented in webkit browsers when using an `input[search]` element.\n  */\n\n  Modernizr.addTest('inputsearchevent', hasEvent('search'));\n\n  /**\n   * atRule returns a given CSS property at-rule (eg @keyframes), possibly in\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @memberof Modernizr\n   * @name Modernizr.atRule\n   * @optionName Modernizr.atRule()\n   * @optionProp atRule\n   * @access public\n   * @function atRule\n   * @param {string} prop - String name of the @-rule to test for\n   * @returns {string|boolean} The string representing the (possibly prefixed)\n   * valid version of the @-rule, or `false` when it is unsupported.\n   * @example\n   * ```js\n   *  var keyframes = Modernizr.atRule('@keyframes');\n   *\n   *  if (keyframes) {\n   *    // keyframes are supported\n   *    // could be `@-webkit-keyframes` or `@keyframes`\n   *  } else {\n   *    // keyframes === `false`\n   *  }\n   * ```\n   *\n   */\n\n  var atRule = function atRule(prop) {\n    var length = prefixes.length;\n    var cssrule = window.CSSRule;\n    var rule;\n\n    if (typeof cssrule === 'undefined') {\n      return undefined;\n    }\n\n    if (!prop) {\n      return false;\n    }\n\n    // remove literal @ from beginning of provided property\n    prop = prop.replace(/^@/, '');\n\n    // CSSRules use underscores instead of dashes\n    rule = prop.replace(/-/g, '_').toUpperCase() + '_RULE';\n\n    if (rule in cssrule) {\n      return '@' + prop;\n    }\n\n    for (var i = 0; i < length; i++) {\n      // prefixes gives us something like -o-, and we want O_\n      var prefix = prefixes[i];\n      var thisRule = prefix.toUpperCase() + '_' + rule;\n\n      if (thisRule in cssrule) {\n        return '@-' + prefix.toLowerCase() + '-' + prop;\n      }\n    }\n\n    return false;\n  };\n\n  ModernizrProto.atRule = atRule;\n\n  /**\n   * prefixed returns the prefixed or nonprefixed property name variant of your input\n   *\n   * @memberof Modernizr\n   * @name Modernizr.prefixed\n   * @optionName Modernizr.prefixed()\n   * @optionProp prefixed\n   * @access public\n   * @function prefixed\n   * @param {string} prop - String name of the property to test for\n   * @param {object} [obj] - An object to test for the prefixed properties on\n   * @param {HTMLElement} [elem] - An element used to test specific properties against\n   * @returns {string|false} The string representing the (possibly prefixed) valid\n   * version of the property, or `false` when it is unsupported.\n   * @example\n   *\n   * Modernizr.prefixed takes a string css value in the DOM style camelCase (as\n   * opposed to the css style kebab-case) form and returns the (possibly prefixed)\n   * version of that property that the browser actually supports.\n   *\n   * For example, in older Firefox...\n   * ```js\n   * prefixed('boxSizing')\n   * ```\n   * returns 'MozBoxSizing'\n   *\n   * In newer Firefox, as well as any other browser that support the unprefixed\n   * version would simply return `boxSizing`. Any browser that does not support\n   * the property at all, it will return `false`.\n   *\n   * By default, prefixed is checked against a DOM element. If you want to check\n   * for a property on another object, just pass it as a second argument\n   *\n   * ```js\n   * var rAF = prefixed('requestAnimationFrame', window);\n   *\n   * raf(function() {\n   *  renderFunction();\n   * })\n   * ```\n   *\n   * Note that this will return _the actual function_ - not the name of the function.\n   * If you need the actual name of the property, pass in `false` as a third argument\n   *\n   * ```js\n   * var rAFProp = prefixed('requestAnimationFrame', window, false);\n   *\n   * rafProp === 'WebkitRequestAnimationFrame' // in older webkit\n   * ```\n   *\n   * One common use case for prefixed is if you're trying to determine which transition\n   * end event to bind to, you might do something like...\n   * ```js\n   * var transEndEventNames = {\n   *     'WebkitTransition' : 'webkitTransitionEnd', * Saf 6, Android Browser\n   *     'MozTransition'    : 'transitionend',       * only for FF < 15\n   *     'transition'       : 'transitionend'        * IE10, Opera, Chrome, FF 15+, Saf 7+\n   * };\n   *\n   * var transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n   * ```\n   *\n   * If you want a similar lookup, but in kebab-case, you can use [prefixedCSS](#modernizr-prefixedcss).\n   */\n\n  var prefixed = ModernizrProto.prefixed = function (prop, obj, elem) {\n    if (prop.indexOf('@') === 0) {\n      return atRule(prop);\n    }\n\n    if (prop.indexOf('-') != -1) {\n      // Convert kebab-case to camelCase\n      prop = cssToDOM(prop);\n    }\n    if (!obj) {\n      return testPropsAll(prop, 'pfx');\n    } else {\n      // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n      return testPropsAll(prop, obj, elem);\n    }\n  };\n\n  /*\n  {\n    \"name\": \"Fullscreen API\",\n    \"property\": \"fullscreen\",\n    \"caniuse\": \"fullscreen\",\n    \"notes\": [{\n      \"name\": \"MDN documentation\",\n      \"href\": \"https://developer.mozilla.org/en/API/Fullscreen\"\n    }],\n    \"polyfills\": [\"screenfulljs\"],\n    \"builderAliases\": [\"fullscreen_api\"]\n  }\n  */\n  /* DOC\n  Detects support for the ability to make the current website take over the user's entire screen\n  */\n\n  // github.com/Modernizr/Modernizr/issues/739\n  Modernizr.addTest('fullscreen', !!(prefixed('exitFullscreen', document, false) || prefixed('cancelFullScreen', document, false)));\n\n  /*\n  {\n    \"name\": \"CSS Transforms\",\n    \"property\": \"csstransforms\",\n    \"caniuse\": \"transforms2d\",\n    \"tags\": [\"css\"]\n  }\n  */\n\n  Modernizr.addTest('csstransforms', function () {\n    // Android < 3.0 is buggy, so we sniff and blacklist\n    // http://git.io/hHzL7w\n    return navigator.userAgent.indexOf('Android 2.') === -1 && testAllProps('transform', 'scale(1)', true);\n  });\n\n  /*\n  {\n    \"name\": \"HTML5 Video\",\n    \"property\": \"video\",\n    \"caniuse\": \"video\",\n    \"tags\": [\"html5\"],\n    \"knownBugs\": [\n      \"Without QuickTime, `Modernizr.video.h264` will be `undefined`; https://github.com/Modernizr/Modernizr/issues/546\"\n    ],\n    \"polyfills\": [\n      \"html5media\",\n      \"mediaelementjs\",\n      \"sublimevideo\",\n      \"videojs\",\n      \"leanbackplayer\",\n      \"videoforeverybody\"\n    ]\n  }\n  */\n  /* DOC\n  Detects support for the video element, as well as testing what types of content it supports.\n  \n  Subproperties are provided to describe support for `ogg`, `h264` and `webm` formats, e.g.:\n  \n  ```javascript\n  Modernizr.video         // true\n  Modernizr.video.ogg     // 'probably'\n  ```\n  */\n\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n  //                     thx to NielsLeenheer and zcorpan\n\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\n  Modernizr.addTest('video', function () {\n    var elem = createElement('video');\n    var bool = false;\n\n    // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n    try {\n      bool = !!elem.canPlayType;\n      if (bool) {\n        bool = new Boolean(bool);\n        bool.ogg = elem.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/, '');\n\n        // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n        bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/, '');\n\n        bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/, '');\n\n        bool.vp9 = elem.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/, '');\n\n        bool.hls = elem.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/, '');\n      }\n    } catch (e) {}\n\n    return bool;\n  });\n\n  /*\n  {\n    \"name\": \"CSS :target pseudo-class\",\n    \"caniuse\": \"css-sel3\",\n    \"property\": \"target\",\n    \"tags\": [\"css\"],\n    \"notes\": [{\n      \"name\": \"MDN documentation\",\n      \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/:target\"\n    }],\n    \"authors\": [\"@zachleat\"],\n    \"warnings\": [\"Opera Mini supports :target but doesn't update the hash for anchor links.\"]\n  }\n  */\n  /* DOC\n  Detects support for the ':target' CSS pseudo-class.\n  */\n\n  // querySelector\n  Modernizr.addTest('target', function () {\n    var doc = window.document;\n    if (!('querySelectorAll' in doc)) {\n      return false;\n    }\n\n    try {\n      doc.querySelectorAll(':target');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  });\n\n  /*\n  {\n    \"name\": \"ES5 String.prototype.contains\",\n    \"property\": \"contains\",\n    \"authors\": [\"Robert Kowalski\"],\n    \"tags\": [\"es6\"]\n  }\n  */\n  /* DOC\n  Check if browser implements ECMAScript 6 `String.prototype.contains` per specification.\n  */\n\n  Modernizr.addTest('contains', is(String.prototype.contains, 'function'));\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n  ;\n})(window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source/assets/.tmp/modernizr.js\n");

/***/ }),

/***/ "./source/assets/js/head.js":
/*!**********************************!*\
  !*** ./source/assets/js/head.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(/*! ../.tmp/modernizr */ \"./source/assets/.tmp/modernizr.js\");\n\nvar _fontloader = __webpack_require__(/*! ./helpers/fontloader */ \"./source/assets/js/helpers/fontloader.js\");\n\nvar _fontloader2 = _interopRequireDefault(_fontloader);\n\nvar _helper = __webpack_require__(/*! ./helpers/helper */ \"./source/assets/js/helpers/helper.js\");\n\nvar _helper2 = _interopRequireDefault(_helper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.estatico = {\n\tdata: {}, // Content data\n\toptions: { // Module options\n\t\tresourceRoot: window.resourceRoot,\n\t\tfontsFilePath: 'assets/css/fonts.css?v5'\n\t}\n};\n\nwindow.estatico.fontLoader = new _fontloader2.default(window.estatico.options.resourceRoot + window.estatico.options.fontsFilePath);\nwindow.estatico.helpers = new _helper2.default();\n\n/* tracking for DTM */\n\n/* contact form tracking success*/\nwindow.aaTrackFormSuccess = function (formName) {\n\t'use strict';\n\n\ts.linkTrackVars = 'eVar7,prop12';\n\ts.linkTrackEvents = 'event4';\n\ts.events = 'event4';\n\ts.eVar7 = formName && formName !== '' ? formName : s.pageName;\n\ts.prop12 = 'D=v7';\n\ts.tl();\n};\n\n/* contact form tracking error */\nwindow.aaTrackFormError = function (formName, formErrMsg) {\n\t'use strict';\n\n\ts.linkTrackVars = 'eVar7,prop12';\n\ts.linkTrackEvents = 'event5';\n\ts.events = 'event5';\n\ts.eVar7 = formName && formName !== '' ? formName + ':' + formErrMsg : s.pageName;\n\ts.prop12 = 'D=v7';\n\ts.tl();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zb3VyY2UvYXNzZXRzL2pzL2hlYWQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc291cmNlL2Fzc2V0cy9qcy9oZWFkLmpzP2M2NzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi8udG1wL21vZGVybml6cic7XG5pbXBvcnQgRm9udExvYWRlciBmcm9tICcuL2hlbHBlcnMvZm9udGxvYWRlcic7XG5pbXBvcnQgSGVscGVyIGZyb20gJy4vaGVscGVycy9oZWxwZXInO1xuXG53aW5kb3cuZXN0YXRpY28gPSB7XG5cdGRhdGE6IHt9LCAvLyBDb250ZW50IGRhdGFcblx0b3B0aW9uczogeyAvLyBNb2R1bGUgb3B0aW9uc1xuXHRcdHJlc291cmNlUm9vdDogd2luZG93LnJlc291cmNlUm9vdCxcblx0XHRmb250c0ZpbGVQYXRoOiAnYXNzZXRzL2Nzcy9mb250cy5jc3M/djUnXG5cdH1cbn07XG5cbndpbmRvdy5lc3RhdGljby5mb250TG9hZGVyID0gbmV3IEZvbnRMb2FkZXIod2luZG93LmVzdGF0aWNvLm9wdGlvbnMucmVzb3VyY2VSb290ICsgd2luZG93LmVzdGF0aWNvLm9wdGlvbnMuZm9udHNGaWxlUGF0aCk7XG53aW5kb3cuZXN0YXRpY28uaGVscGVycyA9IG5ldyBIZWxwZXIoKTtcblxuLyogdHJhY2tpbmcgZm9yIERUTSAqL1xuXG4vKiBjb250YWN0IGZvcm0gdHJhY2tpbmcgc3VjY2VzcyovXG53aW5kb3cuYWFUcmFja0Zvcm1TdWNjZXNzID0gZnVuY3Rpb24oZm9ybU5hbWUpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHMubGlua1RyYWNrVmFycyA9ICdlVmFyNyxwcm9wMTInO1xuXHRzLmxpbmtUcmFja0V2ZW50cyA9ICdldmVudDQnO1xuXHRzLmV2ZW50cyA9ICdldmVudDQnO1xuXHRzLmVWYXI3ID0gKGZvcm1OYW1lICYmIGZvcm1OYW1lICE9PSAnJykgPyBmb3JtTmFtZSA6IHMucGFnZU5hbWU7XG5cdHMucHJvcDEyID0gJ0Q9djcnO1xuXHRzLnRsKCk7XG59O1xuXG4vKiBjb250YWN0IGZvcm0gdHJhY2tpbmcgZXJyb3IgKi9cbndpbmRvdy5hYVRyYWNrRm9ybUVycm9yID0gZnVuY3Rpb24oZm9ybU5hbWUsIGZvcm1FcnJNc2cpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHMubGlua1RyYWNrVmFycyA9ICdlVmFyNyxwcm9wMTInO1xuXHRzLmxpbmtUcmFja0V2ZW50cyA9ICdldmVudDUnO1xuXHRzLmV2ZW50cyA9ICdldmVudDUnO1xuXHRzLmVWYXI3ID0gKGZvcm1OYW1lICYmIGZvcm1OYW1lICE9PSAnJykgPyBmb3JtTmFtZSArICc6JyArIGZvcm1FcnJNc2cgOiBzLnBhZ2VOYW1lO1xuXHRzLnByb3AxMiA9ICdEPXY3Jztcblx0cy50bCgpO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFGQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./source/assets/js/head.js\n");

/***/ }),

/***/ "./source/assets/js/helpers/fontloader.js":
/*!************************************************!*\
  !*** ./source/assets/js/helpers/fontloader.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _helper = __webpack_require__(/*! ./helper */ \"./source/assets/js/helpers/helper.js\");\n\nvar _helper2 = _interopRequireDefault(_helper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nvar FontLoader = function (_Helper) {\n\t_inherits(FontLoader, _Helper);\n\n\tfunction FontLoader() {\n\t\tvar href = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/assets/css/fonts.css?v1';\n\n\t\t_classCallCheck(this, FontLoader);\n\n\t\tvar _this = _possibleConstructorReturn(this, _Helper.call(this));\n\n\t\tif (!FontLoader.name) {\n\t\t\tFontLoader.name = 'FontLoader';\n\t\t}\n\n\t\t_this.logger = _this.log(FontLoader.name);\n\n\t\t// once cached, the css file is stored on the client forever unless\n\t\t// the URL below is changed. Any change will invalidate the cache\n\t\t_this.cssHref = href;\n\n\t\tif (_this._fileIsCached()) {\n\t\t\t_this.logger('just use the cached version');\n\t\t\t_this.injectFontsStylesheet();\n\t\t} else {\n\t\t\t_this.logger('don\\'t block the loading of the page; wait until it\\'s done; then download fonts');\n\t\t\t_this.on(window, 'load', _this.injectFontsStylesheet.bind(_this));\n\t\t}\n\t\treturn _this;\n\t}\n\n\tFontLoader.prototype.injectFontsStylesheet = function injectFontsStylesheet() {\n\t\tif (this._supportsLocalStorageAndXHR()) {\n\t\t\tif (this._cacheIsValid(this.cssHref)) {\n\t\t\t\tthis._injectRawStyle(localStorage.fontCssCache);\n\t\t\t} else {\n\t\t\t\tthis._fetchAndStoreStylesheet();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._createFontStylesheet();\n\t\t}\n\t};\n\n\tFontLoader.prototype._fetchAndStoreStylesheet = function _fetchAndStoreStylesheet() {\n\t\tvar _this2 = this;\n\n\t\tvar xhr = new XMLHttpRequest();\n\n\t\txhr.open('GET', this.cssHref, true);\n\n\t\t// cater for IE8 which does not support addEventListener or attachEvent on XMLHttpRequest\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState === 4 && xhr.status === 200) {\n\n\t\t\t\t// once we have the content, quickly inject the css rules\n\t\t\t\t_this2._injectRawStyle(xhr.responseText);\n\n\t\t\t\t// and cache the text content for further use\n\t\t\t\t// notice that this overwrites anything that might have already been previously cached\n\t\t\t\tlocalStorage.fontCssCache = xhr.responseText;\n\t\t\t\tlocalStorage.fontCssCacheFile = _this2.cssHref;\n\t\t\t}\n\t\t};\n\n\t\txhr.send();\n\t};\n\n\tFontLoader.prototype._createFontStylesheet = function _createFontStylesheet() {\n\t\tvar stylesheet = document.createElement('link');\n\n\t\tstylesheet.href = this.cssHref;\n\t\tstylesheet.rel = 'stylesheet';\n\t\tstylesheet.type = 'text/css';\n\n\t\tdocument.getElementsByTagName('head')[0].appendChild(stylesheet);\n\n\t\t// just use the native browser cache\n\t\t// this requires a good expires header on the server\n\t\tdocument.cookie = 'fontCssCache';\n\t};\n\n\tFontLoader.prototype._supportsLocalStorageAndXHR = function _supportsLocalStorageAndXHR() {\n\t\treturn window.localStorage && window.XMLHttpRequest;\n\t};\n\n\t/**\n  * If we have the fonts in localStorage or if we've cached them using the native browser cache\n  *\n  * @return {Boolean}\n  */\n\n\n\tFontLoader.prototype._fileIsCached = function _fileIsCached() {\n\t\treturn window.localStorage && localStorage.fontCssCache || document.cookie.indexOf('fontCssCache') > -1;\n\t};\n\n\t/**\n  * Determine whether a css file has been cached locally\n  * and if it's the current version\n  *\n  * @param  {String} href\t- CSS path to check vs the cached one\n  *\n  * @return {Boolean}\n  */\n\n\n\tFontLoader.prototype._cacheIsValid = function _cacheIsValid(href) {\n\t\treturn localStorage.fontCssCache && localStorage.fontCssCacheFile === href;\n\t};\n\n\t// this is the simple utility that injects the cached or loaded css text\n\n\n\tFontLoader.prototype._injectRawStyle = function _injectRawStyle(text) {\n\t\tvar style = document.createElement('style');\n\n\t\t// cater for IE8 which doesn't support style.innerHTML\n\t\tstyle.setAttribute('type', 'text/css');\n\n\t\tif (style.styleSheet) {\n\t\t\tstyle.styleSheet.cssText = text;\n\t\t} else {\n\t\t\tstyle.innerHTML = text;\n\t\t}\n\n\t\tdocument.getElementsByTagName('head')[0].appendChild(style);\n\t};\n\n\treturn FontLoader;\n}(_helper2.default);\n\nexports.default = FontLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zb3VyY2UvYXNzZXRzL2pzL2hlbHBlcnMvZm9udGxvYWRlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zb3VyY2UvYXNzZXRzL2pzL2hlbHBlcnMvZm9udGxvYWRlci5qcz9jNTEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIZWxwZXIgZnJvbSAnLi9oZWxwZXInO1xuXG5jbGFzcyBGb250TG9hZGVyIGV4dGVuZHMgSGVscGVyIHtcblxuXHRjb25zdHJ1Y3RvcihocmVmID0gJy9hc3NldHMvY3NzL2ZvbnRzLmNzcz92MScpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0aWYgKCFGb250TG9hZGVyLm5hbWUpIHtcblx0XHRcdEZvbnRMb2FkZXIubmFtZSA9ICdGb250TG9hZGVyJztcblx0XHR9XG5cblx0XHR0aGlzLmxvZ2dlciA9IHRoaXMubG9nKEZvbnRMb2FkZXIubmFtZSk7XG5cblx0XHQvLyBvbmNlIGNhY2hlZCwgdGhlIGNzcyBmaWxlIGlzIHN0b3JlZCBvbiB0aGUgY2xpZW50IGZvcmV2ZXIgdW5sZXNzXG5cdFx0Ly8gdGhlIFVSTCBiZWxvdyBpcyBjaGFuZ2VkLiBBbnkgY2hhbmdlIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2FjaGVcblx0XHR0aGlzLmNzc0hyZWYgPSBocmVmO1xuXG5cdFx0aWYgKHRoaXMuX2ZpbGVJc0NhY2hlZCgpKSB7XG5cdFx0XHR0aGlzLmxvZ2dlcignanVzdCB1c2UgdGhlIGNhY2hlZCB2ZXJzaW9uJyk7XG5cdFx0XHR0aGlzLmluamVjdEZvbnRzU3R5bGVzaGVldCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmxvZ2dlcignZG9uXFwndCBibG9jayB0aGUgbG9hZGluZyBvZiB0aGUgcGFnZTsgd2FpdCB1bnRpbCBpdFxcJ3MgZG9uZTsgdGhlbiBkb3dubG9hZCBmb250cycpO1xuXHRcdFx0dGhpcy5vbih3aW5kb3csICdsb2FkJywgdGhpcy5pbmplY3RGb250c1N0eWxlc2hlZXQuYmluZCh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cblx0aW5qZWN0Rm9udHNTdHlsZXNoZWV0KCkge1xuXHRcdGlmICh0aGlzLl9zdXBwb3J0c0xvY2FsU3RvcmFnZUFuZFhIUigpKSB7XG5cdFx0XHRpZiAodGhpcy5fY2FjaGVJc1ZhbGlkKHRoaXMuY3NzSHJlZikpIHtcblx0XHRcdFx0dGhpcy5faW5qZWN0UmF3U3R5bGUobG9jYWxTdG9yYWdlLmZvbnRDc3NDYWNoZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9mZXRjaEFuZFN0b3JlU3R5bGVzaGVldCgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9jcmVhdGVGb250U3R5bGVzaGVldCgpO1xuXHRcdH1cblx0fVxuXG5cdF9mZXRjaEFuZFN0b3JlU3R5bGVzaGVldCgpIHtcblx0XHRsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cblx0XHR4aHIub3BlbignR0VUJywgdGhpcy5jc3NIcmVmLCB0cnVlKTtcblxuXHRcdC8vIGNhdGVyIGZvciBJRTggd2hpY2ggZG9lcyBub3Qgc3VwcG9ydCBhZGRFdmVudExpc3RlbmVyIG9yIGF0dGFjaEV2ZW50IG9uIFhNTEh0dHBSZXF1ZXN0XG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHIuc3RhdHVzID09PSAyMDApIHtcblxuXHRcdFx0XHQvLyBvbmNlIHdlIGhhdmUgdGhlIGNvbnRlbnQsIHF1aWNrbHkgaW5qZWN0IHRoZSBjc3MgcnVsZXNcblx0XHRcdFx0dGhpcy5faW5qZWN0UmF3U3R5bGUoeGhyLnJlc3BvbnNlVGV4dCk7XG5cblx0XHRcdFx0Ly8gYW5kIGNhY2hlIHRoZSB0ZXh0IGNvbnRlbnQgZm9yIGZ1cnRoZXIgdXNlXG5cdFx0XHRcdC8vIG5vdGljZSB0aGF0IHRoaXMgb3ZlcndyaXRlcyBhbnl0aGluZyB0aGF0IG1pZ2h0IGhhdmUgYWxyZWFkeSBiZWVuIHByZXZpb3VzbHkgY2FjaGVkXG5cdFx0XHRcdGxvY2FsU3RvcmFnZS5mb250Q3NzQ2FjaGUgPSB4aHIucmVzcG9uc2VUZXh0O1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2UuZm9udENzc0NhY2hlRmlsZSA9IHRoaXMuY3NzSHJlZjtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0eGhyLnNlbmQoKTtcblx0fVxuXG5cdF9jcmVhdGVGb250U3R5bGVzaGVldCgpIHtcblx0XHRsZXQgc3R5bGVzaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcblxuXHRcdHN0eWxlc2hlZXQuaHJlZiA9IHRoaXMuY3NzSHJlZjtcblx0XHRzdHlsZXNoZWV0LnJlbCA9ICdzdHlsZXNoZWV0Jztcblx0XHRzdHlsZXNoZWV0LnR5cGUgPSAndGV4dC9jc3MnO1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZXNoZWV0KTtcblxuXHRcdC8vIGp1c3QgdXNlIHRoZSBuYXRpdmUgYnJvd3NlciBjYWNoZVxuXHRcdC8vIHRoaXMgcmVxdWlyZXMgYSBnb29kIGV4cGlyZXMgaGVhZGVyIG9uIHRoZSBzZXJ2ZXJcblx0XHRkb2N1bWVudC5jb29raWUgPSAnZm9udENzc0NhY2hlJztcblx0fVxuXG5cdF9zdXBwb3J0c0xvY2FsU3RvcmFnZUFuZFhIUigpIHtcblx0XHRyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZSAmJiB3aW5kb3cuWE1MSHR0cFJlcXVlc3Q7XG5cdH1cblxuXHQvKipcblx0ICogSWYgd2UgaGF2ZSB0aGUgZm9udHMgaW4gbG9jYWxTdG9yYWdlIG9yIGlmIHdlJ3ZlIGNhY2hlZCB0aGVtIHVzaW5nIHRoZSBuYXRpdmUgYnJvd3NlciBjYWNoZVxuXHQgKlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufVxuXHQgKi9cblx0X2ZpbGVJc0NhY2hlZCgpIHtcblx0XHRyZXR1cm4gKHdpbmRvdy5sb2NhbFN0b3JhZ2UgJiYgbG9jYWxTdG9yYWdlLmZvbnRDc3NDYWNoZSkgfHwgZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ2ZvbnRDc3NDYWNoZScpID4gLTE7XG5cdH1cblxuXHQvKipcblx0ICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBjc3MgZmlsZSBoYXMgYmVlbiBjYWNoZWQgbG9jYWxseVxuXHQgKiBhbmQgaWYgaXQncyB0aGUgY3VycmVudCB2ZXJzaW9uXG5cdCAqXG5cdCAqIEBwYXJhbSAge1N0cmluZ30gaHJlZlx0LSBDU1MgcGF0aCB0byBjaGVjayB2cyB0aGUgY2FjaGVkIG9uZVxuXHQgKlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufVxuXHQgKi9cblx0X2NhY2hlSXNWYWxpZChocmVmKSB7XG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZS5mb250Q3NzQ2FjaGUgJiYgKGxvY2FsU3RvcmFnZS5mb250Q3NzQ2FjaGVGaWxlID09PSBocmVmKTtcblx0fVxuXG5cdC8vIHRoaXMgaXMgdGhlIHNpbXBsZSB1dGlsaXR5IHRoYXQgaW5qZWN0cyB0aGUgY2FjaGVkIG9yIGxvYWRlZCBjc3MgdGV4dFxuXHRfaW5qZWN0UmF3U3R5bGUodGV4dCkge1xuXHRcdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cblx0XHQvLyBjYXRlciBmb3IgSUU4IHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCBzdHlsZS5pbm5lckhUTUxcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcblxuXHRcdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5pbm5lckhUTUwgPSB0ZXh0O1xuXHRcdH1cblxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvbnRMb2FkZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBb0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFoSEE7QUFDQTtBQWlIQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./source/assets/js/helpers/fontloader.js\n");

/***/ }),

/***/ "./source/assets/js/helpers/helper.js":
/*!********************************************!*\
  !*** ./source/assets/js/helpers/helper.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _bows = __webpack_require__(/*! ../../../../node_modules/bows/bows */ \"./node_modules/bows/bows.js\");\n\nvar _bows2 = _interopRequireDefault(_bows);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Helper = function () {\n\tfunction Helper() {\n\t\t_classCallCheck(this, Helper);\n\n\t\t// Use bows for happy, colourful logging (https://github.com/latentflip/bows)\n\t\tthis.log = _bows2.default;\n\t}\n\n\t// Create a console.log wrapper with optional namespace/context\n\t// Run \"localStorage.debug = true;\" to enable\n\t// Run \"localStorage.removeItem('debug');\" to disable\n\t// This is overwritten when in dev mode (see dev.js)\n\n\n\tHelper.prototype.cLog = function cLog(context) {\n\t\tvar fn = function fn() {};\n\n\t\tif (window.localStorage && localStorage.debug) {\n\t\t\tif (typeof context === 'string' && context.length > 0) {\n\t\t\t\tfn = Function.prototype.bind.call(console.log, console, context + ' â˜ž');\n\t\t\t} else {\n\t\t\t\tfn = Function.prototype.bind.call(console.log, console);\n\t\t\t}\n\t\t}\n\n\t\treturn fn;\n\t};\n\n\t// a simple event handler wrapper\n\n\n\tHelper.prototype.on = function on(el, ev, callback) {\n\t\tif (el.addEventListener) {\n\t\t\tel.addEventListener(ev, callback, false);\n\t\t} else if (el.attachEvent) {\n\t\t\tel.attachEvent('on' + ev, callback);\n\t\t}\n\t};\n\n\t// Deep extend (before $.extend is available)\n\n\n\tHelper.prototype.extend = function extend(destination, source) {\n\t\tvar property = void 0;\n\n\t\tfor (property in source) {\n\t\t\tif (source[property] && source[property].constructor && source[property].constructor === Object) {\n\t\t\t\tdestination[property] = destination[property] || {};\n\n\t\t\t\tthis.extend(destination[property], source[property]);\n\t\t\t} else {\n\t\t\t\tdestination[property] = source[property];\n\t\t\t}\n\t\t}\n\n\t\treturn destination;\n\t};\n\n\tHelper.prototype.isLocal = function isLocal(anchor) {\n\t\tvar rhash = /#.*$/,\n\t\t    anchorUrl,\n\t\t    locationUrl;\n\n\t\tanchorUrl = anchor.href.replace(rhash, '').replace(/(^\\w+:|^)\\/\\//, '');\n\t\tlocationUrl = location.href.replace(rhash, '').replace(/(^\\w+:|^)\\/\\//, '');\n\n\t\t// Decoding may throw an error if the URL isn't UTF-8 (#9518)\n\t\ttry {\n\t\t\tanchorUrl = decodeURIComponent(anchorUrl);\n\t\t} catch (error) {}\n\n\t\ttry {\n\t\t\tlocationUrl = decodeURIComponent(locationUrl);\n\t\t} catch (error) {}\n\n\t\treturn anchor.hash.length > 1 && anchorUrl === locationUrl;\n\t};\n\n\treturn Helper;\n}();\n\nexports.default = Helper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zb3VyY2UvYXNzZXRzL2pzL2hlbHBlcnMvaGVscGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NvdXJjZS9hc3NldHMvanMvaGVscGVycy9oZWxwZXIuanM/MTc4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm93cyBmcm9tICcuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYm93cy9ib3dzJztcblxuY2xhc3MgSGVscGVyIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvLyBVc2UgYm93cyBmb3IgaGFwcHksIGNvbG91cmZ1bCBsb2dnaW5nIChodHRwczovL2dpdGh1Yi5jb20vbGF0ZW50ZmxpcC9ib3dzKVxuXHRcdHRoaXMubG9nID0gYm93cztcblx0fVxuXG5cdC8vIENyZWF0ZSBhIGNvbnNvbGUubG9nIHdyYXBwZXIgd2l0aCBvcHRpb25hbCBuYW1lc3BhY2UvY29udGV4dFxuXHQvLyBSdW4gXCJsb2NhbFN0b3JhZ2UuZGVidWcgPSB0cnVlO1wiIHRvIGVuYWJsZVxuXHQvLyBSdW4gXCJsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcIiB0byBkaXNhYmxlXG5cdC8vIFRoaXMgaXMgb3ZlcndyaXR0ZW4gd2hlbiBpbiBkZXYgbW9kZSAoc2VlIGRldi5qcylcblx0Y0xvZyhjb250ZXh0KSB7XG5cdFx0dmFyIGZuID0gZnVuY3Rpb24oKSB7fTtcblxuXHRcdGlmICh3aW5kb3cubG9jYWxTdG9yYWdlICYmIGxvY2FsU3RvcmFnZS5kZWJ1Zykge1xuXHRcdFx0aWYgKHR5cGVvZiBjb250ZXh0ID09PSAnc3RyaW5nJyAmJiBjb250ZXh0Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Zm4gPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBjb250ZXh0ICsgJyDimJ4nKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZuID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuO1xuXHR9XG5cblx0Ly8gYSBzaW1wbGUgZXZlbnQgaGFuZGxlciB3cmFwcGVyXG5cdG9uKGVsLCBldiwgY2FsbGJhY2spIHtcblx0XHRpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgY2FsbGJhY2ssIGZhbHNlKTtcblx0XHR9IGVsc2UgaWYgKGVsLmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRlbC5hdHRhY2hFdmVudCgnb24nICsgZXYsIGNhbGxiYWNrKTtcblx0XHR9XG5cdH1cblxuXHQvLyBEZWVwIGV4dGVuZCAoYmVmb3JlICQuZXh0ZW5kIGlzIGF2YWlsYWJsZSlcblx0ZXh0ZW5kKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcblx0XHRsZXQgcHJvcGVydHk7XG5cblx0XHRmb3IgKHByb3BlcnR5IGluIHNvdXJjZSkge1xuXHRcdFx0aWYgKHNvdXJjZVtwcm9wZXJ0eV0gJiYgc291cmNlW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciAmJiBzb3VyY2VbcHJvcGVydHldLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcblx0XHRcdFx0ZGVzdGluYXRpb25bcHJvcGVydHldID0gZGVzdGluYXRpb25bcHJvcGVydHldIHx8IHt9O1xuXG5cdFx0XHRcdHRoaXMuZXh0ZW5kKGRlc3RpbmF0aW9uW3Byb3BlcnR5XSwgc291cmNlW3Byb3BlcnR5XSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkZXN0aW5hdGlvbjtcblx0fVxuXG5cdGlzTG9jYWwoYW5jaG9yKSB7XG5cdFx0dmFyIHJoYXNoID0gLyMuKiQvLFxuXHRcdFx0YW5jaG9yVXJsLFxuXHRcdFx0bG9jYXRpb25Vcmw7XG5cblx0XHRhbmNob3JVcmwgPSBhbmNob3IuaHJlZi5yZXBsYWNlKHJoYXNoLCAnJykucmVwbGFjZSgvKF5cXHcrOnxeKVxcL1xcLy8sICcnKTtcblx0XHRsb2NhdGlvblVybCA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZShyaGFzaCwgJycpLnJlcGxhY2UoLyheXFx3Kzp8XilcXC9cXC8vLCAnJyk7XG5cblx0XHQvLyBEZWNvZGluZyBtYXkgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIFVSTCBpc24ndCBVVEYtOCAoIzk1MTgpXG5cdFx0dHJ5IHtcblx0XHRcdGFuY2hvclVybCA9IGRlY29kZVVSSUNvbXBvbmVudChhbmNob3JVcmwpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7fVxuXG5cdFx0dHJ5IHtcblx0XHRcdGxvY2F0aW9uVXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uVXJsKTtcblx0XHR9IGNhdGNoIChlcnJvcikge31cblxuXHRcdHJldHVybiBhbmNob3IuaGFzaC5sZW5ndGggPiAxICYmIGFuY2hvclVybCA9PT0gbG9jYXRpb25Vcmw7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGVscGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOzs7Ozs7O0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./source/assets/js/helpers/helper.js\n");

/***/ })

/******/ });